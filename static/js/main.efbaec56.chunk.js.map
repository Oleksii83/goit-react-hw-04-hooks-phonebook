{"version":3,"sources":["Component/ContactForm/ContactForm.js","Component/Filter/Filter.js","Component/ContactList/ContactList.js","Component/LocalStorage/LocalStorage.js","App.js","reportWebVitals.js","index.js","Component/ContactList/ContactList.module.css","Component/Filter/Filter.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","reset","nameInputId","shortid","generate","numberInputId","className","preventDefault","htmlFor","onChange","type","id","pattern","title","required","Filter","s","SearchContainer","ContName","placeholder","FilterList","contacts","onDeleteContact","container","map","item","onClick","btn","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","App","setContacts","filter","setFilter","contact","find","alert","prevContacts","ContactList","normalizedFilter","toLowerCase","includes","getFilterSearch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.efbaec56.chunk.js","sourcesContent":["import { useState } from 'react';\nimport shortid from 'shortid';\nimport './ContactForm.css';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  return (\n    <form className=\"Input-container\" onSubmit={handleSubmit}>\n      <h3 className=\"Input-name\"> Name </h3>\n      <label htmlFor={nameInputId}>\n        <input\n          className=\"Input\"\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className=\"TelInputContainer\" htmlFor={numberInputId}>\n        <h3 className=\"Input-name\"> Number </h3>\n        <input\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          id={numberInputId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className=\"input-btn\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class OldContactForm extends Component {\n//   state = {\n//     contacts: [],\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleChange = e => {\n//     this.setState({\n//       [e.currentTarget.name]: e.currentTarget.value,\n//     });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n\n//     this.reset();\n//   };\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form className=\"Input-container\" onSubmit={this.handleSubmit}>\n//         <h3 className=\"Input-name\"> Name </h3>\n//         <label htmlFor={this.nameInputId}>\n//           <input\n//             className=\"Input\"\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//             type=\"text\"\n//             name=\"name\"\n//             id={this.nameInputId}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n//         <label className=\"TelInputContainer\" htmlFor={this.numberInputId}>\n//           <h3 className=\"Input-name\"> Number </h3>\n//           <input\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//             type=\"tel\"\n//             name=\"number\"\n//             id={this.numberInputId}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\" className=\"input-btn\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n","// import { Component } from 'react';\nimport React from 'react';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.SearchContainer}>\n    <p className={s.ContName}>Find contacts by name:</p>\n    <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n      className=\"InputSearch\"\n      placeholder=\"Paul Richardson\"\n    />\n  </label>\n);\n\nexport default Filter;\n","import React from 'react';\nimport s from './ContactList.module.css';\n\nconst FilterList = ({ contacts, onDeleteContact }) => (\n  <ul className={s.container}>\n    {contacts.map(({ name, number, id }) => (\n      <li key={id} className={s.item}>\n        {name}: {number}\n        <button type=\"button\" onClick={() => onDeleteContact(id)} className={s.btn}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\nexport default FilterList;\n","import { useState, useEffect } from 'react';\r\n\r\nconst useLocalStorage = (key, defaultValue) => {\r\n  const [state, setState] = useState(\r\n    () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport shortid from 'shortid';\nimport ContactForm from './Component/ContactForm/ContactForm';\nimport Filter from './Component/Filter/Filter';\nimport ContactList from './Component/ContactList/ContactList';\nimport useLocalStorage from './Component/LocalStorage/LocalStorage';\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  const getFilterSearch = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  };\n\n  const onSearchChange = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const onDeleteContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n\n  const addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    const equalName = contacts.find(item => item.name === contact.name);\n\n    if (equalName) return alert(`${contact.name} is already in contacts`);\n\n    setContacts(prevContacts => [...prevContacts, contact]);\n  };\n\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // useEffect(() => {\n  //   const contacts = JSON.parse(localStorage.getItem('contacts'));\n  //   if (contacts) {\n  //     setContacts(contacts);\n  //   }\n  // }, []);\n\n  return (\n    <>\n      <div className=\"Input-form\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={addContact} />\n\n        <h2 className=\"SearchName\">Contact</h2>\n        <Filter value={filter} onChange={onSearchChange} />\n\n        <ContactList contacts={getFilterSearch()} onDeleteContact={onDeleteContact} />\n      </div>\n    </>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts:\n//     filter: '',\n//   };\n\n//   getFilterSearch = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n//   };\n\n//   onSearchChange = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   onDeleteContact = id => {\n//     this.setState({\n//       contacts: this.state.contacts.filter(contact => contact.id !== id),\n//     });\n//   };\n\n//   formSubmitHandler = data => {\n//     console.log(data);\n//   };\n\n//   addContact = ({ name, number }) => {\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const equalName = this.state.contacts.find(item => item.name === contact.name);\n\n//     if (equalName) return alert(`${contact.name} is already in contacts`);\n\n//     this.setState(prevState => ({\n//       contacts: [...prevState.contacts, contact],\n//     }));\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log('App componentDidUpdate');\n\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log('обновились контакты');\n\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   componentDidMount() {\n//     const contact = localStorage.getItem('contacts');\n//     const parsedContact = JSON.parse(contact);\n\n//     if (parsedContact) {\n//       this.setState({ contacts: parsedContact });\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <>\n//         <div className=\"Input-form\">\n//           <h1>Phonebook</h1>\n//           <ContactForm onSubmit={this.addContact} />\n\n//           <h2 className=\"SearchName\">Contact</h2>\n//           <Filter value={this.state.filter} onChange={this.onSearchChange} />\n\n//           <ContactList contacts={this.getFilterSearch()} onDeleteContact={this.onDeleteContact} />\n//         </div>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__3UcSm\",\"item\":\"ContactList_item__2oU_R\",\"btn\":\"ContactList_btn__mBZeM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchContainer\":\"Filter_SearchContainer__OXqWI\",\"SearchName\":\"Filter_SearchName__1wiud\",\"ContName\":\"Filter_ContName__3aKrf\",\"InputSearch\":\"Filter_InputSearch__1sLAU\"};"],"sourceRoot":""}