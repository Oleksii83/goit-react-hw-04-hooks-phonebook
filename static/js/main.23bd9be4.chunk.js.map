{"version":3,"sources":["Component/ContactForm/ContactForm.js","Component/Filter/Filter.js","Component/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js","Component/ContactList/ContactList.module.css","Component/Filter/Filter.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","console","log","nameInputId","shortid","generate","numberInputId","className","handleSubmit","preventDefault","htmlFor","onChange","type","id","pattern","title","required","Filter","s","SearchContainer","ContName","placeholder","FilterList","contacts","onDeleteContact","container","map","item","onClick","btn","App","setContacts","filter","setFilter","useEffect","localStorage","setItem","JSON","stringify","parse","getItem","contact","find","alert","prevContacts","ContactList","normalizedFilter","toLowerCase","includes","getFilterSearch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.23bd9be4.chunk.js","sourcesContent":["import { useState } from 'react';\nimport shortid from 'shortid';\nimport './ContactForm.css';\n\nexport default function ContactForm({ onSubmit }) {\n  const [contacts, setContacs] = useState([]);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    console.log(name);\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    console.log('🚀 ~ file: ContactForm.js ~ line 18 ~ ContactForm ~ handleSubmit', handleSubmit);\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  return (\n    <form className=\"Input-container\" onSubmit={handleSubmit}>\n      <h3 className=\"Input-name\"> Name </h3>\n      <label htmlFor={nameInputId}>\n        <input\n          className=\"Input\"\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className=\"TelInputContainer\" htmlFor={numberInputId}>\n        <h3 className=\"Input-name\"> Number </h3>\n        <input\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          id={numberInputId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className=\"input-btn\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class OldContactForm extends Component {\n//   state = {\n//     contacts: [],\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleChange = e => {\n//     this.setState({\n//       [e.currentTarget.name]: e.currentTarget.value,\n//     });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n\n//     this.reset();\n//   };\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form className=\"Input-container\" onSubmit={this.handleSubmit}>\n//         <h3 className=\"Input-name\"> Name </h3>\n//         <label htmlFor={this.nameInputId}>\n//           <input\n//             className=\"Input\"\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//             type=\"text\"\n//             name=\"name\"\n//             id={this.nameInputId}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n//         <label className=\"TelInputContainer\" htmlFor={this.numberInputId}>\n//           <h3 className=\"Input-name\"> Number </h3>\n//           <input\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//             type=\"tel\"\n//             name=\"number\"\n//             id={this.numberInputId}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\" className=\"input-btn\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n","// import { Component } from 'react';\nimport React from 'react';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.SearchContainer}>\n    <p className={s.ContName}>Find contacts by name:</p>\n    <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n      className=\"InputSearch\"\n      placeholder=\"Paul Richardson\"\n    />\n  </label>\n);\n\nexport default Filter;\n","import React from 'react';\nimport s from './ContactList.module.css';\n\nconst FilterList = ({ contacts, onDeleteContact }) => (\n  <ul className={s.container}>\n    {contacts.map(({ name, number, id }) => (\n      <li key={id} className={s.item}>\n        {name}: {number}\n        <button type=\"button\" onClick={() => onDeleteContact(id)} className={s.btn}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\nexport default FilterList;\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport shortid from 'shortid';\nimport ContactForm from './Component/ContactForm/ContactForm';\nimport Filter from './Component/Filter/Filter';\nimport ContactList from './Component/ContactList/ContactList';\n\nexport default function App() {\n  const { contacts, setContacts } = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  const getFilterSearch = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  };\n\n  const onSearchChange = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const onDeleteContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n\n  const addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    const equalName = setContacts.find(item => item.name === contact.name);\n\n    if (equalName) return alert(`${contact.name} is already in contacts`);\n\n    setContacts(prevContacts => ({\n      contacts: [...prevContacts, contact],\n    }));\n  };\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  useEffect(() => {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n    if (contacts) {\n      setContacts(contacts);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"Input-form\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={addContact} />\n\n        <h2 className=\"SearchName\">Contact</h2>\n        <Filter value={filter} onChange={onSearchChange} />\n\n        <ContactList contacts={getFilterSearch()} onDeleteContact={onDeleteContact} />\n      </div>\n    </>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts:\n//     filter: '',\n//   };\n\n//   getFilterSearch = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n//   };\n\n//   onSearchChange = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   onDeleteContact = id => {\n//     this.setState({\n//       contacts: this.state.contacts.filter(contact => contact.id !== id),\n//     });\n//   };\n\n//   formSubmitHandler = data => {\n//     console.log(data);\n//   };\n\n//   addContact = ({ name, number }) => {\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const equalName = this.state.contacts.find(item => item.name === contact.name);\n\n//     if (equalName) return alert(`${contact.name} is already in contacts`);\n\n//     this.setState(prevState => ({\n//       contacts: [...prevState.contacts, contact],\n//     }));\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log('App componentDidUpdate');\n\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log('обновились контакты');\n\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   componentDidMount() {\n//     const contact = localStorage.getItem('contacts');\n//     const parsedContact = JSON.parse(contact);\n\n//     if (parsedContact) {\n//       this.setState({ contacts: parsedContact });\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <>\n//         <div className=\"Input-form\">\n//           <h1>Phonebook</h1>\n//           <ContactForm onSubmit={this.addContact} />\n\n//           <h2 className=\"SearchName\">Contact</h2>\n//           <Filter value={this.state.filter} onChange={this.onSearchChange} />\n\n//           <ContactList contacts={this.getFilterSearch()} onDeleteContact={this.onDeleteContact} />\n//         </div>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__3UcSm\",\"item\":\"ContactList_item__2oU_R\",\"btn\":\"ContactList_btn__mBZeM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchContainer\":\"Filter_SearchContainer__OXqWI\",\"SearchName\":\"Filter_SearchName__1wiud\",\"ContName\":\"Filter_ContName__3aKrf\",\"InputSearch\":\"Filter_InputSearch__1sLAU\"};"],"sourceRoot":""}